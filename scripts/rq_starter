#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import signal
import subprocess
import atexit
from actinia_core.resources.common.config import Configuration
import time
import argparse

__license__ = "GPLv3"
__author__     = "Sören Gebbert"
__copyright__  = "Copyright 2016, Sören Gebbert"
__maintainer__ = "Soeren Gebbert"
__email__      = "soerengebbert@googlemail.com"

# Job handling
worker_pids = []


def create_workers(config_file):

    conf = Configuration()
    try:
        if config_file and os.path.isfile(config_file):
            conf.read(path=config_file)
        else:
            conf.read()
    except IOError as e:
        print("Unable to read config file, will use defaults instead, IOError: %s"%str(e))

    # Redis work queue
    global worker_pids

    for i in range(conf.NUMBER_OF_QUEUES):
        name = "%s_%i"%(conf.WORKER_QUEUE_NAME, i)
        print("Start worker queue", name)
        args = ["rq_custom_worker", name]
        proc = subprocess.Popen(args)
        worker_pids.append(proc.pid)


def kill_all_workers():
    global worker_pids
    for worker_pid in worker_pids:
        print("Terminate worker queue", worker_pid)
        os.kill(worker_pid, signal.SIGTERM)


def main():

    parser = argparse.ArgumentParser(description='Start all Actinia Core custom worker listening to a specific queue'
                                                 'that are specified in the GRaaS configuration file '
                                                 'or in a configuration file specified as an optional path.')

    parser.add_argument("-c", "--config", type=str, required=False,
                        help="The path to the Actinia Core configuration file")

    args = parser.parse_args()

    atexit.register(kill_all_workers)

    create_workers(args.config)

    # Run the everlasting loop
    while True:
        time.sleep(1)


if __name__ == '__main__':
    main()
