#!flask/bin/python
# -*- coding: utf-8 -*-
"""
Actinia server script

This script is for testing purpose only, since the actinia server should run behind
the uwsgi application server.
"""
import argparse
import os
from actinia_core.endpoints import create_endpoints
from actinia_core.health_check import health_check
from actinia_core.version import version
from actinia_core.resources.common.app import flask_app
from actinia_core.resources.common.config import global_config, DEFAULT_CONFIG_PATH
from actinia_core.resources.common.redis_interface import connect
from actinia_core.resources.common.process_queue import create_process_queue

__license__ = "GPLv3"
__author__     = "Sören Gebbert"
__copyright__  = "Copyright 2016, Sören Gebbert"
__maintainer__ = "Sören Gebbert"
__email__      = "soerengebbert@googlemail.com"


def main():

    parser = argparse.ArgumentParser(description='Start actinia server. A running redis server is required.')

    parser.add_argument("--host", type=str, required=False, default="0.0.0.0",
                        help="The IP address that should be used for the server")

    parser.add_argument("--port", type=int, required=False, default=5000,
                        help="The port that should be used for the server")

    parser.add_argument("--debug", type=bool, required=False, default=True,
                        help="Set True to activate debugging")

    args = parser.parse_args()

    if os.path.exists(DEFAULT_CONFIG_PATH) is True and os.path.isfile(DEFAULT_CONFIG_PATH):
        global_config.read(DEFAULT_CONFIG_PATH)

    # Create the endpoints based on the global config
    create_endpoints()

    # Connect the redis interfaces
    connect(global_config.REDIS_SERVER_URL,
            global_config.REDIS_SERVER_PORT)

    # Create the process queue
    create_process_queue(global_config)

    flask_app.run(host=args.host, port=args.port, debug=args.debug)


if __name__ == '__main__':
    main()
