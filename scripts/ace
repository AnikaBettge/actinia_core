#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#######
# actinia-core - an open source REST API for scalable, distributed, high
# performance processing of geographical data that uses GRASS GIS for
# computational tasks. For details, see https://actinia.mundialis.de/
#
# Copyright (c) 2016-2018 SÃ¶ren Gebbert and mundialis GmbH & Co. KG
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#######

import requests
import simplejson
import time
import sys
import os
import grass.script as grass
import subprocess
from pprint import pprint
from typing import List, Optional
import click

__license__ = "GPLv3"
__author__ = "Soeren Gebbert"
__copyright__ = "Copyright 2018, Soeren Gebbert"
__maintainer__ = "Soeren Gebbert"
__email__ = "soerengebbert@googlemail.com"

"""
export ACTINIA_USER='demouser'
export ACTINIA_PASSWORD='gu3st!pa55w0rd'
export ACTINIA_URL='https://actinia.mundialis.de/latest'
"""

# Example script for actinia with import and export options
# grass77 ~/grassdata/nc_spm_08/user1/
import_export = """
g.region raster=elev+https://storage.googleapis.com/graas-geodata/elev_ned_30m.tif -p
r.univar map=elev
r.info elev
r.slope.aspect elevation=elev slope=slope_elev+GTiff
r.info slope_elev
"""

# Example script for actinia with export options
# grass77 ~/grassdata/nc_spm_08/user1/
export_script = """
# Example script for actinia shell interface
g.region raster=elevation -p
r.univar map=elevation
r.info elevation
r.slope.aspect -a elevation=elevation slope=slope_elev+GTiff
# r.mapcalc expression=slope_elev=100
r.info slope_elev
r.watershed elevation=elevation accumulation=acc+GTiff
r.info acc
r.neighbors input=elevation output=neighbour_elev+GTiff
r.info neighbour_elev
"""

# Default values
ACTINIA_USER = 'demouser'
ACTINIA_PASSWORD = 'gu3st!pa55w0rd'
ACTINIA_URL = 'https://actinia.mundialis.de/latest'
ACTINIA_AUTH = (ACTINIA_USER, ACTINIA_PASSWORD)
LOCATION = None
MAPSET = None

PCHAIN = {
    "version": "1",
    "list": list()
}


def set_credentials():
    """Read the environmental variables and set the actinia url and credentials

    Returns:

    """
    global ACTINIA_USER, ACTINIA_PASSWORD, ACTINIA_URL, ACTINIA_AUTH

    act_user = os.getenv("ACTINIA_USER")
    act_pass = os.getenv("ACTINIA_PASSWORD")
    act_url = os.getenv("ACTINIA_URL")

    if act_user is not None:
        ACTINIA_USER = act_user

    if act_pass is not None:
        ACTINIA_PASSWORD = act_pass

    if act_url is not None:
        ACTINIA_URL = act_url

    ACTINIA_AUTH = (ACTINIA_USER, ACTINIA_PASSWORD)


def setup_location(location: str = None):
    """Setup the location from argument or the current GRASS GIS location

    Args:
        location: The optional location to be set globally

    """

    global LOCATION

    if location is not None:
        LOCATION = location
    else:
        LOCATION = grass.read_command("g.gisenv", get="LOCATION_NAME")


def actinia_version():
    """Returs the version of the actinia server

    Returns:
        The version of the actinia server

    """
    url = ACTINIA_URL + "/version"
    r = requests.get(url, auth=ACTINIA_AUTH)
    print(r.text)


def execute_script(script: str, mapset: str=None):
    """Execute a script with GRASS GIS commands

    Args:
        script (str): The script path
        mapset: If mapset is set, then the processing will be performed in the mapset of the persistent user database
    """

    f = open(script, "r")
    lines = f.readlines()

    commands = list()

    for line in lines:
        line = line.strip()
        # Get all lines that have no comments
        if line and "#" not in line[:1]:
            tokens = line.split()
            commands.append(tokens)

    send_poll_commands(commands=commands, mapset=mapset)


def send_poll_commands(commands: List[List[str]], mapset: str=None) -> None:
    """Create the actinia process chain, send it to the actinia server
    and poll for the result

    Args:
        commands: A list of GRASS commands from the command line or from a script
        mapset: If mapset is set, then the processing will be performed in the mapset of the persistent user database
    """
    for command in commands:
        p_chain = create_actinia_process(command)
        if p_chain:
            PCHAIN["list"].append(p_chain)

    if mapset:
        url = ACTINIA_URL + f"/locations/{LOCATION}/mapsets/{mapset}/processing_async"
    else:
        url = ACTINIA_URL + f"/locations/{LOCATION}/processing_async_export"

    r = requests.post(url, json=PCHAIN, auth=ACTINIA_AUTH)

    data = simplejson.loads(r.text)
    print("Resource status", data["status"])

    poll_url = data["urls"]["status"]

    print("Polling:", poll_url)

    while True:
        r = requests.get(poll_url, auth=ACTINIA_AUTH)

        try:
            data = simplejson.loads(r.text)
            print("Resource poll status:", data["status"])
            print(data["message"])

            final_status = data["status"]
            if data["status"] == "finished" or data["status"] == "error" or data["status"] == "terminated":
                break
            time.sleep(1)
        except Exception as a:
            raise

    print("Resource status", data["status"])
    print("--------------------------------------------------------------------------")

    if r.status_code == 200:

        if final_status == "terminated":
            print(r.text)
            return

        for entry in data["process_log"]:
            if entry["stdout"]:
                print(entry["stdout"])
            if entry["stderr"][0]:
                pprint(entry["stderr"])
        pprint(data["urls"])
    else:
        print(r.text)


def create_actinia_process(command: List[str]) -> Optional[dict]:
    """Create an actinia command dict, that can be put into a process chain

    Args:
        command: The GRASS GIS command as a list of strings

    Returns:
        The actinia process dictionary
    """
    if not command:
        return None

    if "--json" not in command:
        command.append("--json")

    # print(command)

    proc = subprocess.Popen(args=command, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                            stdin=subprocess.PIPE)
    (stdout_buff, stderr_buff) = proc.communicate()
    stdout_buff = stdout_buff.decode()
    stderr_buff = stderr_buff.decode()

    # print(stdout_buff)

    if proc.returncode != 0:
        raise Exception("Error while executing GRASS command: %s. \n"
                        "\n%s\n%s\n" % (str(command), stdout_buff, stderr_buff))
    try:
        actinia_proc = simplejson.loads(stdout_buff)
        return actinia_proc
    except:
        raise


def list_user_jobs(type_: str):
    """List all jobs of the user of a all or a specific type

    Args:
        type_: The type of the job: all, accepted, running, terminated, finished, error

    """

    url = ACTINIA_URL + f"/resources/{ACTINIA_USER}"
    r = requests.get(url, json=PCHAIN, auth=ACTINIA_AUTH)

    data = simplejson.loads(r.text)
    for entry in data["resource_list"]:
        if type_.lower() == "all":
            print(entry["resource_id"], entry["status"], entry["datetime"])
        else:
            if type_.lower() == entry["status"]:
                print(entry["resource_id"], entry["status"], entry["datetime"])


def show_user_job_info(resource_id: str):
    """Show information about a specific actinia job

    Args:
        resource_id: The resource id of the job

    """

    url = ACTINIA_URL + f"/resources/{ACTINIA_USER}/{resource_id}"
    r = requests.get(url, auth=ACTINIA_AUTH)

    data = simplejson.loads(r.text)
    pprint(data)


def kill_user_job(resource_id: str):
    """Kill a running actinia job

    Args:
        resource_id: The resource id of the job

    """

    url = ACTINIA_URL + f"/resources/{ACTINIA_USER}/{resource_id}"
    r = requests.delete(url, auth=ACTINIA_AUTH)

    data = simplejson.loads(r.text)
    pprint(data)


def list_user_locations():
    """List all locations the user has access to
    """

    url = ACTINIA_URL + "/locations"
    r = requests.get(url, auth=ACTINIA_AUTH)

    data = simplejson.loads(r.text)
    if "locations" in data:
        pprint(data["locations"])
    else:
        pprint(data)


def list_user_mapsets():
    """List all mapsets of a specific location
    """

    url = ACTINIA_URL + f"/locations/{LOCATION}/mapsets"
    r = requests.get(url, auth=ACTINIA_AUTH)

    data = simplejson.loads(r.text)
    if "process_results" in data:
        pprint(data["process_results"])
    else:
        pprint(data)


def list_maps_of_mapsets(mapset: str, map_type: str):
    """List specific map types of a specific location/mapset

    Args:
        mapset: The mapset to list the maps from
        map_type: The map type: raster_layers, vector_layers, strds

    """

    # Read location and mapset
    # mapset = grass.read_command("g.mapset", "p").strip()

    url = ACTINIA_URL + f"/locations/{LOCATION}/mapsets/{mapset}/{map_type}"
    r = requests.get(url, auth=ACTINIA_AUTH)

    data = simplejson.loads(r.text)
    if "process_results" in data:
        pprint(data["process_results"])
    else:
        pprint(data)


def create_persistent_mapset(mapset: str):
    """Creates a mapset in the user specific persistent database

    Args:
        mapset: The mapset to be created in the user specific persistent database

    """

    print(f"Try to create mapset {mapset}")
    url = ACTINIA_URL + f"/locations/{LOCATION}/mapsets/{mapset}"
    r = requests.post(url, auth=ACTINIA_AUTH)
    data = simplejson.loads(r.text)
    pprint(data)


def delete_persistent_mapset(mapset: str):
    """Deletes a mapset from the user specific persistent database

    Args:
        mapset: The mapset of the user specific persistent database to delete

    """

    print(f"Try to delete mapset {mapset}")
    url = ACTINIA_URL + f"/locations/{LOCATION}/mapsets/{mapset}"
    r = requests.delete(url, auth=ACTINIA_AUTH)
    data = simplejson.loads(r.text)
    pprint(data)



@click.command(context_settings=dict(ignore_unknown_options=True, ))
@click.option("--version", is_flag=True, help="Request the version of the server.")
@click.option('--script', "-s", help="The script file from which all all commands will be executed "
                                     "on the actinia server.")
@click.option("--list-jobs", "-j", type=click.Choice(['all', 'accepted', 'running', 'terminated',
                                                      'finished', 'error']),
              nargs=1, help="List all jobs of the user.")
@click.option("--info-job", "-i", nargs=1, help="Show information about a job.")
@click.option("--kill-job", "-k", nargs=1, help="Kill a job.")
@click.option("--list-locations", "-l", is_flag=True, help="List locations the user has access to.")
@click.option("--list-mapsets", "-m", is_flag=True, help="List mapsets of the current or a provided location")
@click.option("--list-raster", "-r", nargs=1,
              help="List raster maps of mapsets from the current or a provided location")
@click.option("--list-vector", "-v", nargs=1,
              help="List vector maps of mapsets from the current or a provided location")
@click.option("--list-strds", "-t", nargs=1, help="List strds of mapsets from the current or a provided location")
@click.option("--create-mapset", "-c", nargs=1, help="Create a new mapset in the persistent database of the "
                                                     "actinia server using the current or the provided location")
@click.option("--delete-mapset", "-d", nargs=1, help="Delete an existing mapset from the  actinia server "
                                                     "using the current or the provided location")
@click.option("--persistent", "-p", nargs=1, help="Use a persistent database location/mapset for processing on the "
                                                 "actinia server")
@click.option("--location", "-o", nargs=1, help="Use this location for processing instead of the current one on "
                                                "the actinia server")
@click.argument('grass_command', nargs=-1, type=click.UNPROCESSED)
def main(script: str, version: bool, list_jobs: str, info_job: str,
         list_locations: bool, list_mapsets: bool,
         create_mapset: str, delete_mapset: str,
         persistent: str, location: str,
         list_raster: str, list_vector: str, list_strds: str,
         kill_job: str, grass_command: tuple):
    """This tool allows the execution of single GRASS GIS command or a list of GRASS GIS commands
    on an actinia REST service. In addition it provides job management and the ability to
    list locations, mapsets and map layer the user has access to.

    This tool must be executed in an active GRASS GIS session and will use the current location
    to access the actinia service. The current location can be overwritten by the *-o* option.
    All commands will be executed per default in an ephemeral database,
    hence generated output must be exported using augmented GRASS commands.
    The option --persistent MAPSET_NAME allows the execution of commands in the
    persistent user database. It should be used with --location option.

    The user must setup the following environmental variables to specify the actinia
    server and credentials:

      \b
      export ACTINIA_USER='user'
      export ACTINIA_PASSWORD='password'
      export ACTINIA_URL='https://actinia.mundialis.de/latest'

    This tool takes a GRASS GIS command as argument. In addition there are options to:

      \b
      1. Execute a list of commands from an input script file.
      2. Perform job management on the actinia server (list, info, kill)
      3. Show the version of the actinia service
      4. Show the locations and mapsets the user has access to
      5. Show map layers of specific location/mapset

    GRASS GIS commands can be augmented with actinia specific extensions.
    The + operator can be specified for an input parameter
    to import a web located resource and to specify the export of an
    output parameter.

    Single command example:

        ace g.list rast

    Single command example with location option:

        ace -o nc_spm_08 g.list rast

    The following commands from a script will import a raster layer from an internet
    source as raster map *elev*, sets the computational region to the map and
    computes the slope. Additional information about the raster layer are requested with r.info:

      \b
      # Import the web resource and set the region to the imported map
      g.region raster=elev+https://storage.googleapis.com/graas-geodata/elev_ned_30m.tif -ap
      # Compute univariate statistics
      r.univar map=elev
      r.info elev
      # Compute the slope of the imported map and mark it for export
      r.slope.aspect elevation=elev slope=slope_elev+GTiff
      r.info slope_elev

    Run the script commands.sh in the current location on the actinia server:

        ace -s commands.sh

    Run the script commands.sh in the location *latlong* on the actinia server:

        ace -o latlong -s commands.sh

    List all running jobs of the current user

        ace -j running

    Get information about a specific job

        ace -i resource_id-3ce07606-cc77-4188-942e-5a5fbc8f1091

    Kill a running job

        ace -k resource_id-3ce07606-cc77-4188-942e-5a5fbc8f1091

    List all locations the user has access to:

        ace -l

    List all mapsets of the current location the user access to:

        ace -m

    List all mapsets of the location *nc_spm_08* the user access to:

        ace -m -o nc_spm_08

    List all raster maps in mapsets PERMANENT of the location *nc_spm_08*:

        ace -o nc_spm_08 -r PERMANENT

    List all vector maps in mapsets PERMANENT of the location *nc_spm_08*:

        ace -o nc_spm_08 -v PERMANENT

    List all strds in mapsets PERMANENT of the location *nc_spm_08*:

        ace -o nc_spm_08 -t PERMANENT

    Create a new mapset in location nc_spm_08 in the persistent user database

        ace -o nc_spm_08 -c test_mapset

    Delete test_mapset mapset from location nc_spm_08 in the persistent user database

        ace -o nc_spm_08 -c test_mapset

    Run command g.list in the persistent user database in location nc_spm_08 mapset test_mapset

        ace -o nc_spm_08 -p test_mapset g.list type=raster mapset=test_mapset

    """
    set_credentials()
    setup_location()

    if version is True:
        actinia_version()
        return

    if location:
        setup_location(location=location)
        if script:
            execute_script(script=script, mapset=persistent)
        elif list_mapsets:
            list_user_mapsets()
        elif list_raster:
            list_maps_of_mapsets(mapset=list_raster, map_type="raster_layers")
        elif list_vector:
            list_maps_of_mapsets(mapset=list_vector, map_type="vector_layers")
        elif list_strds:
            list_maps_of_mapsets(mapset=list_strds, map_type="strds")
        elif create_mapset:
            create_persistent_mapset(mapset=create_mapset)
        elif delete_mapset:
            delete_persistent_mapset(mapset=delete_mapset)
        else:
            if grass_command[0][0:2] in ["r.", "v.", "i.", "t.", "g.", "r3."]:
                send_poll_commands(commands=[list(grass_command), ], mapset=persistent)
    elif list_jobs:
        list_user_jobs(type_=list_jobs)
    elif info_job:
        show_user_job_info(resource_id=info_job)
    elif kill_job:
        kill_user_job(resource_id=kill_job)
    elif list_locations:
        list_user_locations()
    elif list_raster:
        list_maps_of_mapsets(mapset=list_raster, map_type="raster_layers")
    elif list_vector:
        list_maps_of_mapsets(mapset=list_vector, map_type="vector_layers")
    elif list_strds:
        list_maps_of_mapsets(mapset=list_strds, map_type="strds")
    elif list_mapsets:
        list_user_mapsets()
    elif create_mapset:
        create_persistent_mapset(mapset=create_mapset)
    elif delete_mapset:
        delete_persistent_mapset(mapset=delete_mapset)
    elif script:
        execute_script(script=script, mapset=persistent)
    else:
        if len(sys.argv) > 1:
            if grass_command[0][0:2] in ["r.", "v.", "i.", "t.", "g.", "r3."]:
                send_poll_commands(commands=[list(grass_command), ], mapset=persistent)
        else:
            actinia_version()


if __name__ == '__main__':
    main()
